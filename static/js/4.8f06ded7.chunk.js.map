{"version":3,"sources":["components/Dialog/Dialog.module.css","components/Dialog/DialogItem/DialogItem.tsx","components/Dialog/Message/Message.tsx","redux/selectors/dialogs-selector.ts","components/Dialog/Dialog.tsx"],"names":["module","exports","DialogItem","name","path","id","to","activeClassName","s","item","active","className","src","userLogo","alt","Message","message","selectDialogs","state","dialogsPage","dialogs","selectMessages","messages","AddMessageForm","props","useForm","register","handleSubmit","reset","onSubmit","data","sendMessage","addMessage","ref","type","Dialog","useSelector","dispatch","useDispatch","dialogElements","map","d","messageElements","m","dialog","list","newMessage","actions"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,KAAO,qBAAqB,OAAS,uBAAuB,SAAW,yBAAyB,QAAU,0B,0FCsBzKC,EAbwB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,KACjCC,EAAO,WADwC,EAARC,GAG3C,OACI,cAAC,IAAD,CAASC,GAAIF,EAAMG,gBAAiBC,IAAEC,KAAO,IAAMD,IAAEE,OAArD,SACI,sBAAKC,UAAWH,IAAEC,KAAlB,UACI,qBAAKG,IAAKC,IAAUC,IAAI,cACxB,4BAAIX,UCFLY,EARqB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClC,OACI,qBAAKL,UAAWH,IAAEQ,QAAlB,SACI,4BAAIA,O,eCRHC,EAAgB,SAACC,GAC1B,OAAOA,EAAMC,YAAYC,SAGhBC,EAAiB,SAACH,GAC3B,OAAOA,EAAMC,YAAYG,U,QCSvBC,EAAyC,SAACC,GAAW,IAAD,EACZC,cAAlCC,EAD8C,EAC9CA,SAAUC,EADoC,EACpCA,aAAcC,EADsB,EACtBA,MAKhC,OACI,uBAAMC,SAAUF,GAL2B,SAACG,GAC5CN,EAAMO,YAAYD,EAAKE,YACvBJ,OAGA,UACI,8BACI,0BAAUzB,KAAK,aAAa8B,IAAKP,MAErC,8BACI,wBAAQQ,KAAK,SAAb,gCAiCDC,UA3BU,WACrB,IAAMf,EAAUgB,YAAYnB,GACtBK,EAAWc,YAAYf,GAEvBgB,EAAWC,cAMbC,EAAiBnB,EAAQoB,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAuBtC,KAAMsC,EAAEtC,KAAME,GAAIoC,EAAEpC,IAA1BoC,EAAEpC,OAEvDqC,EAAkBpB,EAASkB,KAAI,SAACG,GAAD,OAAO,cAAC,EAAD,CAAS3B,QAAS2B,EAAE3B,SAAc2B,EAAEtC,OAE9E,OACI,sBAAKM,UAAWH,IAAEoC,OAAlB,UACI,qBAAKjC,UAAWH,IAAEqC,KAAlB,SAAyBN,IACzB,sBAAK5B,UAAWH,IAAEc,SAAlB,UACKoB,EACD,8BACI,cAAC,EAAD,CAAgBX,YAdL,SAACe,GACxBT,EAASU,IAAQhB,YAAYe","file":"static/js/4.8f06ded7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__3csl3\",\"list\":\"Dialog_list__Fs-Sf\",\"item\":\"Dialog_item__Upx0F\",\"active\":\"Dialog_active__2Zvuv\",\"messages\":\"Dialog_messages__3QVnB\",\"message\":\"Dialog_message__2K6Mj\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./../Dialog.module.css\";\r\nimport userLogo from \"../../../assets/images/user.png\";\r\n\r\ntype PropType = {\r\n    name: string,\r\n    id: number\r\n}\r\n\r\nconst DialogItem: React.FC<PropType> = ({name, id}) => {\r\n    let path = \"/dialog/\" + id;\r\n\r\n    return (\r\n        <NavLink to={path} activeClassName={s.item + \" \" + s.active}>\r\n            <div className={s.item}>\r\n                <img src={userLogo} alt=\"user logo\" />\r\n                <p>{name}</p>\r\n            </div>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./../Dialog.module.css\";\r\n\r\ntype PropType = {\r\n    message: string;\r\n};\r\n\r\nconst Message: React.FC<PropType> = ({message}) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <p>{message}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Message;","import { RootState } from '../redux-store';\r\n\r\nexport const selectDialogs = (state: RootState) => {\r\n    return state.dialogsPage.dialogs;\r\n};\r\n\r\nexport const selectMessages = (state: RootState) => {\r\n    return state.dialogsPage.messages;\r\n};\r\n","import React from \"react\";\r\nimport s from \"./Dialog.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectDialogs, selectMessages } from \"../../redux/selectors/dialogs-selector\";\r\nimport { actions } from \"../../redux/dialogs-reducer\";\r\n\r\ntype PropFormType = {\r\n    sendMessage: (newMessage: string) => void;\r\n};\r\ntype FormValueType = {\r\n    addMessage: string;\r\n};\r\n\r\nconst AddMessageForm: React.FC<PropFormType> = (props) => {\r\n    const { register, handleSubmit, reset } = useForm<FormValueType>();\r\n    const onSubmit: SubmitHandler<FormValueType> = (data) => {\r\n        props.sendMessage(data.addMessage);\r\n        reset();\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <textarea name=\"addMessage\" ref={register}></textarea>\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Send Message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst Dialog: React.FC = () => {\r\n    const dialogs = useSelector(selectDialogs);\r\n    const messages = useSelector(selectMessages);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const sendMessageHandler = (newMessage: string) => {\r\n        dispatch(actions.sendMessage(newMessage));\r\n    };\r\n\r\n    let dialogElements = dialogs.map((d) => <DialogItem key={d.id} name={d.name} id={d.id} />);\r\n\r\n    let messageElements = messages.map((m) => <Message message={m.message} key={m.id} />);\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <div className={s.list}>{dialogElements}</div>\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n                <div>\r\n                    <AddMessageForm sendMessage={sendMessageHandler} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialog;"],"sourceRoot":""}